---
name: Branch Naming Validation

# Trigger the workflow on push and pull request events
on:
  push:
    branches-ignore:
      - main
      - master
      - dev
      - develop
      - staging
      - production
      - release
  pull_request:
    branches:
      - main
      - master
      - dev
      - develop
      - staging
      - production

jobs:
  validate-branch-name:
    runs-on: ubuntu-latest

    steps:
      - name: Check branch naming convention
        run: |
          # Get the branch name from the event
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          echo "Validating branch name: $BRANCH_NAME"
          
          # Check if branch name is empty
          if [ -z "$BRANCH_NAME" ]; then
            echo "‚ùå Branch name is empty or not found."
            exit 1
          fi
          
          # List of excluded branches (protected branches)
          EXCLUDED_BRANCHES=(
            "main"
            "master"
            "dev"
            "develop"
            "staging"
            "production"
            "release"
          )
          
          # Check if branch is in excluded list
          for excluded in "${EXCLUDED_BRANCHES[@]}"; do
            if [ "$BRANCH_NAME" = "$excluded" ]; then
              echo "‚úÖ Branch '$BRANCH_NAME' is a protected branch and is excluded from naming validation."
              exit 0
            fi
          done
          
          # Define the regex pattern for branch naming convention
          # Pattern: ÌÉÄÏûÖ/Ïù¥ÏäàÎ≤àÌò∏/ÏÑ§Î™Ö
          # Types: feat|feature|fix|bug|bugfix|hot|hotfix|docs|ref|refactor|test|chore|rel|release
          # Issue number: [0-9]+ or [A-Z]+-[0-9]+

          PATTERN="^(feat|feature|fix|bug|bugfix|hot|hotfix|docs|ref|refactor|test|chore|rel|release)/([0-9]+|[A-Z]+-[0-9]+)/[a-z0-9-]+$"
          
          # Validate branch name against pattern using bash built-in regex (Îçî ÏïàÏ†ÑÌï®)
          if [[ "$BRANCH_NAME" =~ $PATTERN ]]; then
            echo "‚úÖ Branch name '$BRANCH_NAME' follows the naming convention."
            echo ""
            echo "üìã Naming Convention Details:"
            echo "   Pattern: ÌÉÄÏûÖ/Ïù¥ÏäàÎ≤àÌò∏/ÏÑ§Î™Ö"
            echo "   Types: feat|feature, fix|bug|bugfix, hot|hotfix, docs, ref|refactor, test, chore, rel|release"
            echo "   Issue: Number (123) or Jira-style (ABC-123)"
            echo "   Description: lowercase alphanumeric with hyphens only"
            echo ""
            echo "‚ú® Valid examples:"
            echo "   ‚Ä¢ feature/12/shopping-cart"
            echo "   ‚Ä¢ feat/35/user-profile-page"
            echo "   ‚Ä¢ bugfix/8/login-validation-error"
            echo "   ‚Ä¢ fix/27/responsive-layout-fix"
            echo "   ‚Ä¢ hotfix/99/security-patch"
            echo "   ‚Ä¢ docs/5/api-documentation"
            echo "   ‚Ä¢ test/ABC-123/unit-test-coverage"
          else
            echo "‚ùå Branch name '$BRANCH_NAME' does NOT follow the naming convention."
            echo ""
            echo "üìã Required Pattern: ÌÉÄÏûÖ/Ïù¥ÏäàÎ≤àÌò∏/ÏÑ§Î™Ö"
            echo "   Format: TYPE/ISSUE_NUMBER/description"
            echo ""
            echo "üè∑Ô∏è  Allowed Types (full name or abbreviation):"
            echo "   ‚Ä¢ feature, feat    - New features"
            echo "   ‚Ä¢ bugfix, fix, bug - Bug fixes"
            echo "   ‚Ä¢ hotfix, hot      - Urgent fixes"
            echo "   ‚Ä¢ release, rel     - Release preparation"
            echo "   ‚Ä¢ docs             - Documentation"
            echo "   ‚Ä¢ refactor, ref    - Code refactoring"
            echo "   ‚Ä¢ test             - Testing"
            echo "   ‚Ä¢ chore            - Other tasks"
            echo ""
            echo "üî¢ Issue Number Format:"
            echo "   ‚Ä¢ Simple number: 123, 456"
            echo "   ‚Ä¢ Jira-style: ABC-123, DEF-456"
            echo ""
            echo "üìù Description Format:"
            echo "   ‚Ä¢ Lowercase letters, numbers, and hyphens only"
            echo "   ‚Ä¢ No spaces, dots, or special characters"
            echo ""
            echo "‚ú® Valid Examples:"
            echo "   ‚Ä¢ feature/12/shopping-cart"
            echo "   ‚Ä¢ feat/35/user-profile-page"
            echo "   ‚Ä¢ bugfix/8/login-validation-error"
            echo "   ‚Ä¢ fix/27/responsive-layout-fix"
            echo "   ‚Ä¢ hotfix/99/security-patch"
            echo "   ‚Ä¢ hot/103/database-connection-timeout"
            echo "   ‚Ä¢ docs/5/api-documentation"
            echo "   ‚Ä¢ refactor/18/database-optimization"
            echo "   ‚Ä¢ test/22/unit-test-coverage"
            echo "   ‚Ä¢ chore/31/build-script-update"
            echo "   ‚Ä¢ release/45/v2-1-0"
            echo "   ‚Ä¢ rel/ABC-123/user-authentication"
            echo ""
            echo "üö´ Invalid Examples:"
            echo "   ‚Ä¢ feature-12-shopping-cart (wrong separators)"
            echo "   ‚Ä¢ Feature/12/shopping-cart (uppercase type)"
            echo "   ‚Ä¢ feat/12/Shopping-Cart (uppercase in description)"
            echo "   ‚Ä¢ feat/12/shopping_cart (underscore not allowed)"
            echo "   ‚Ä¢ feat/12/shopping.cart (dots not allowed)"
            echo "   ‚Ä¢ new-feature/12/test (invalid type)"
            echo "   ‚Ä¢ feat/abc/test (invalid issue number)"
            echo "   ‚Ä¢ feat/12/test with spaces (spaces not allowed)"
            echo ""
            exit 1
          fi
