/*
 * Tetris Swing Module
 * 🎮 Pure Swing GUI Implementation
 * - Traditional Swing-based Tetris game
 * - Java 21 LTS compatible
 * - Standalone desktop application
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // 'shadow' 플러그인을 추가하여 모든 의존성을 포함하는 JAR 파일을 만듭니다.
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

description = "Tetris Swing Desktop Application"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // 🎯 Core 모듈 의존성
    implementation project(':tetris-core')
    
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 📊 유틸리티 라이브러리
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
}

// Apply Java 21 LTS toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'seoultech.se.tetris.main.Tetris'
}

// 📦 JAR 설정 수정
jar {
    archiveBaseName = 'tetris-swing'
    manifest {
        attributes 'Main-Class': 'seoultech.se.tetris.main.Tetris'
        attributes 'Implementation-Title': 'Tetris Swing Game'
        attributes 'Implementation-Version': project.version
    }
}

// 🚀 Shadow JAR 설정 (모든 의존성 포함)
shadowJar {
    archiveBaseName = 'tetris-swing-fat'
    archiveClassifier = '' // 기본 classifier 제거
    manifest {
        attributes 'Main-Class': 'seoultech.se.tetris.main.Tetris'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

// 🎯 개발 실행 태스크
tasks.register('dev') {
    group = 'application'
    description = 'Run the Swing application in development mode'
    dependsOn 'run'
}

// 🎮 배포용 태스크
tasks.register('dist') {
    group = 'distribution' 
    description = 'Create distribution package for Swing desktop application'
    dependsOn 'shadowJar'
    
    doLast {
        println '🎮 Tetris Swing Application JAR created:'
        println "   Location: ${tasks.shadowJar.get().archiveFile.get().asFile}"
        println "   Run with: java -jar ${tasks.shadowJar.get().archiveFile.get().asFile.name}"
    }
}
